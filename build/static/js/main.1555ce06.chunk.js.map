{"version":3,"sources":["assets/images/logo2.png","components/payment/paymentform.js","history.js","components/userInvoices/singleInvoice.js","components/shared/header.js","components/userInvoices/midsect.js","components/userInvoices/userInvoices.js","routes/routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","inv_id","amount_paid","date_time_paid","created_by","payment_mode","paid_by","paid_by_phone_number","errors","PaymentForm","props","onChange","e","target","name","value","state","length","setState","console","log","onSubmit","preventDefault","rest","formIsValid","Object","values","forEach","val","validateForm","alert","this","className","href","type","placeholder","pattern","inputmode","id","defaultValue","React","Component","history","SingleInvoice","tansaction_id","tansaction_amount","surcharge","date_time","payment_status","map","payment","key","Header","src","logo","alt","Middle","UserInvoices","user_invoice","Routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1555ce06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.8c007743.png\";","import React from 'react'\n// import axios from 'axios'\n\nimport './paymentform.css'\n\nconst initialState = {\n    inv_id: \"\",\n    amount_paid: \"\",\n    date_time_paid: \"\",\n    created_by: \"\",\n    payment_mode: \"\",\n    paid_by: \"\",\n    paid_by_phone_number: \"\",\n    errors: {\n        inv_id: \"\",\n        amount_paid: \"\",\n        date_time_paid: \"\",\n        created_by: \"\",\n        payment_mode: \"\",\n        paid_by: \"\",\n        paid_by_phone_number: \"\",\n    }\n}\n\n\nconst validateForm = ({ errors, ...rest }) => {\n    // let errors ={}\n    let formIsValid = true\n\n    // validate form errors being empty\n    Object.values(errors).forEach(val => {\n        val.length > 0 && (formIsValid = false);\n    })\n\n\n    // validate the form was filled out\n    Object.values(rest).forEach(val => {\n        val === \"\" && (formIsValid = false);\n    });\n\n\n    // if (!this.state.inv_id || !this.state.amount_paid ||\n    //     !this.state.date_time_paid ||  !this.state.created_by || \n    //     !this.state.payment_mode || !this.state.paid_by\n    //     || !this.state.paid_by_phone_number ){\n    //     formIsValid = false\n    //     errors[\"inv_id\"]= \"Feild cant\"\n    // }\n\n    // if (this.state.amount_paid) {\n    //     if (!this.state.amount_paid.match(/^\\w+$/)) {\n    //         formIsValid = false\n    //         errors['amount_paid'] = '*Please use alphanumeric characters only'\n    //     }\n    // }\n\n    // this.setState({ errors })\n    return formIsValid\n}\n\n\nclass PaymentForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = initialState\n\n    }\n\n    onChange = (e) => {\n        const { name, value } = e.target\n        let errors = { ...this.state.errors };\n\n        switch (name) {\n            case \"inv_id\":\n                errors.inv_id =\n                    value.length < 3 ? \"minimum 3 characters required\" : \"\";\n                // value.match(/^\\w+$/) ? \"Please use only alphanumeric:\"\";\n                break;\n            case \"amount_paid\":\n                errors.amount_paid =\n                    value.length < 6 ? \"minimum 20 characters required\" : \"\";\n\n                break;\n            default:\n                break;\n        }\n        this.setState({ errors, [name]: value }, () => console.log(this.state))\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        if (validateForm(this.state)) {\n            alert(`\n            Payment Submitted\n            data:{\n            inv_id: ${this.state.inv_id}\n            amount_paid: ${this.state.amount_paid}\n            date_time_paid: ${this.state.date_time_paid}\n            paid_by: ${this.state.paid_by}\n            }\n          `);\n        } else {\n            alert(\"Payment not Succesfull\");\n        }\n    };\n\n    render() {\n        const { inv_id,\n            amount_paid,\n            date_time_paid,\n            created_by,\n            payment_mode,\n            paid_by,\n            paid_by_phone_number } = this.state\n\n        const { errors } = this.state\n        console.log(errors)\n        return (\n            <div className=\"content\">\n                <a href=\"/userinvoices\">Invoices</a>\n                <div className=\"form_fields\">\n\n                    <h1>\n                        Make payment\n                    </h1>\n                    <div className=\"form_elements\">\n                        <form onSubmit={this.onSubmit} className=\"payment_form\">\n                            <input\n                                className={errors.inv_id.length > 0 ? \"error\" : \"\"}\n                                type=\"text\"\n                                placeholder=\"Enter Invoice\"\n                                value={inv_id}\n                                name=\"inv_id\"\n                                onChange={this.onChange}\n                            />\n\n                            {errors.inv_id.length > 0 && (\n                                <div className=\" errmsg\">{errors.inv_id}</div>)}\n                            <input\n                                className={errors.amount_paid.length > 0 ? \"error\" : \"\"}\n                                type=\"text\"\n                                placeholder=\"Amount to be Paid\"\n                                name=\"amount_paid\"\n                                value={amount_paid}\n                                onChange={this.onChange}\n                                pattern=\"[0-9]*\"\n                                inputmode=\"numeric\"\n                            />\n                            {errors.amount_paid.length > 0 && (\n                                <div className=\"errmsg\">{errors.amount_paid}</div>)}\n\n                            <input\n                                type=\"date\"\n                                id=\"paye_date\"\n                                placeholder=\"Input Date\"\n                                name=\"date_time_paid\"\n                                value={date_time_paid}\n                                onChange={this.onChange}\n\n                            />\n\n                            <div className=\"errmsg\">{this.state.errors.date_time_paid}</div>\n\n                            <input\n                                type=\"text\"\n                                placeholder=\"Created by\"\n                                name=\"created_by\"\n                                value={created_by}\n                                onChange={this.onChange}\n\n                            />\n\n                            <div className=\"errmsg\">{this.state.errors.created_by}</div>\n\n                            <input\n                                type=\"text\"\n                                placeholder=\"Paid By\"\n                                name=\"paid_by\"\n                                value={paid_by}\n                                onChange={this.onChange}\n\n                            />\n                            <div className=\"errmsg\">{this.state.errors.paid_by}</div>\n\n                            <input\n                                type=\"tel\"\n                                placeholder=\"Payee Phone Number\"\n                                name=\"paid_by_phone_number\"\n                                value={paid_by_phone_number}\n                                pattern=\"^-?[0-9]\\d*\\.?\\d*$\"\n                                onChange={this.onChange}\n\n                            />\n\n                            <div className=\"errmsg\">{this.state.errors.paid_by_phone_number}</div>\n\n\n                            <select name=\"payment_mode\" id=\"payment_mode\" className=\"payment_mode\" value={payment_mode} onChange={this.onChange} defaultValue=\"Select Mode of Payment\">\n                                <option defaultValue>Select Mode of Payment</option>\n                                <option value=\"cash\">Cash</option>\n                                <option value=\"cash\">Check</option>\n                                <option value=\"cash\">Mobile Money</option>\n                                <option value=\"cash\">Sticker</option>\n                                <option value=\"cash\">Ticket</option>\n                            </select>\n\n                            <button>\n                                Make Payment\n                        </button>\n\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PaymentForm;","import {createBrowserHistory as history} from 'history';\n\nexport default history();\n","import React from 'react'\nimport { useHistory, withRouter } from \"react-router-dom\";\nimport history from '../../history'\n\n\n\nclass SingleInvoice extends React.Component {\n\n    render() {\n        const payments = [\n            {\n                id: 1, inv_id: 1, tansaction_id: 3,\n                tansaction_amount: 4000, surcharge: 500, date_time: \"12/10/2020\", payment_status: \"true\"\n            },\n            {\n                id: 2, inv_id: 2, tansaction_id: 3,\n                tansaction_amount: 4000, surcharge: 500, date_time: \"12/10/2020\", payment_status: \"true\"\n            },\n            {\n                id: 3, inv_id: 3, tansaction_id: 3,\n                tansaction_amount: 4000, surcharge: 500, date_time: \"12/10/2020\", payment_status: \"true\"\n            },\n\n            {\n                id: 4, inv_id: 3, tansaction_id: 3,\n                tansaction_amount: 4000, surcharge: 500, date_time: \"12/10/2020\", payment_status: \"true\"\n            },\n            {\n                id: 5, inv_id: 3, tansaction_id: 3,\n                tansaction_amount: 4000, surcharge: 500, date_time: \"12/10/2020\", payment_status: \"true\"\n            },\n            {\n                id: 6, inv_id: 3, tansaction_id: 3,\n                tansaction_amount: 4000, surcharge: 500, date_time: \"12/10/2020\", payment_status: \"true\"\n            },\n            {\n                id: 3, inv_id: 3, tansaction_id: 3,\n                tansaction_amount: 4000, surcharge: 500, date_time: \"12/10/2020\", payment_status: \"true\"\n            }\n\n\n        ]\n\n\n\n        return (\n            <div className=\"invoices_tables\">\n                <table id=\"col-tab\">\n                    <thead>\n                        <tr className=\"tbl_header\">\n                            <th>\n                                No.\n                        </th>\n                            <th>\n                                Transaction No\n                        </th>\n                            <th>\n                                Amount\n                        </th>\n                            <th>\n                                Surcharge\n                        </th>\n                            <th>\n                                Date/Time\n                        </th>\n                            <th>\n                                Status\n                        </th>\n                        </tr>\n                    </thead>\n                    {payments.map(payment => (\n                        <tbody>\n                            <tr key={payment.id}>\n                                <td>\n                                    {payment.id}\n                                </td>\n\n                                <td>\n                                    {payment.tansaction_id}\n                                </td>\n                                <td>\n                                    {payment.tansaction_amount}\n                                </td>\n                                <td>\n                                    {payment.surcharge}\n                                </td>\n                                <td>\n                                    {payment.date_time}\n                                </td>\n                                <td>\n                                    {payment.payment_status}\n\n                                </td>\n                                {/* <td>\n                            <button type=\"button\" onClick={() =>{ history.push('/makepayment')\n                                                                window.location.reload()}}>\n                                Make Payment\n                            </button>   \n                        </td> */}\n                            </tr>\n                        </tbody>\n                    ))}\n\n                </table>\n\n            </div>\n        )\n    }\n}\n\nexport default SingleInvoice;\n","import React from 'react'\nimport logo from '../../assets/images/logo2.png'\n\nclass Header extends React.Component {\n    render() {\n\n        return (\n            <div className=\"header\">\n                <div className=\"navbar\">\n                    <div className=\"logo\">\n                        <img className=\"logo-pic\" src={logo} alt=\"logo\" />\n                        <h1>PACKER</h1>\n                    </div>\n                    <p>Call us: (256) 315 000000</p>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Header;","import React from 'react'\n// import logo from '../../assets/images/logo2.png'\n// import '../payment/paymentform.css'\n\nclass Middle extends React.Component {\n    render() {\n\n        return (\n            <div className=\"middle\">\n            <div className=\"middle-bar\">\n\n                <h2>All invoices</h2>\n                <input\n                    className=\"\"\n                    type=\"text\"\n                    placeholder=\"Search Invoice\"\n                />\n                <button type=\"button\">Make Payment</button>\n\n            </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Middle;\n","import React from 'react';\n// import axios from 'axios'\nimport './user_invoices.css';\n// import './singleInvoice'\nimport SingleInvoice from './singleInvoice';\nimport Header from '../shared/header';\nimport Middle from './midsect';\n\nclass UserInvoices extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user_invoice: []\n\n        }\n    }\n\n    // componentDidMount(){\n    //     const url = \"http://api.tvmaze.com/shows\"\n    //     axios.get(url)\n    //         .then(response => {\n    //             console.log(response.data[1].name)\n    //             // const shows const{user_invoice} =this.state= response.data;\n    //             this.setState({ user_invoice: response.data })\n    //         })\n    // }\n\n    render() {\n        return (\n                <div>\n                    <Header/>\n                    <Middle />\n                    <div className=\"all_invoices\">\n                        <SingleInvoice/>\n                    </div>\n                </div>\n              )\n    }\n}\n\nexport default UserInvoices;\n\n\n\n   //     key={user_invoice.id} \n                        //     id={user_invoice.name}  \n                        //     name ={user_invoice.status} \n                        //     genres={user_invoice.genres}\n                        //     premiered={user_invoice.premiered}                        \n                        // /> ","import React from 'react';\nimport { BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport PaymentForm from '../components/payment/paymentform'\nimport UserInvoices from '../components/userInvoices/userInvoices'\nimport history from '../history'\n// import SingleInvoice from '../components/userInvoices/singleInvoice'\n\nconst Routes =()=>{\n\n    return(\n    <BrowserRouter history={history}>\n        <Switch>\n            <Route path='/makepayment' exact component={PaymentForm}/>\n            <Route path='/userinvoices' exact component={UserInvoices}/>\n        </Switch>\n    </BrowserRouter>\n)\n}\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from './routes/routes'\n\nfunction App() {\n  return (\n    <Routes/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}